{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE ViewPatterns #-}
{-# OPTIONS_GHC
-fno-warn-unused-binds -fno-warn-unused-imports #-}

module {{modulePrefix}}.Server ( run ) where

import {{modulePrefix}}.API
import {{modulePrefix}}.Types
import {{modulePrefix}}.Backend

import Control.Monad.Except (ExceptT)
import Control.Monad.IO.Class
import Data.Coerce (coerce)
import Data.Function ((&))
import qualified Data.Map as Map
import Data.Monoid ((<>))
import Data.Proxy (Proxy(..))
import Data.Text (Text)
import qualified Data.Text as T
import GHC.Exts (IsString(..))
import GHC.Generics (Generic)
import Network.HTTP.Client (Manager, defaultManagerSettings, newManager)
import Network.HTTP.Types.Method (methodOptions)
import qualified Network.Wai.Handler.Warp as Warp
import Servant (ServantErr, serve)
import Servant.API
import Servant.API.Verbs (StdMethod(..), Verb)
import Servant.Client (Scheme(Http), ServantError, client)
import Servant.Common.BaseUrl (BaseUrl(..))
import Web.HttpApiData


{{#apiInfo}}
app :: Backend (ExceptT ServantErr IO) -> Application
app backend = serve api server
  where server = serverFromBackend backend
        serverFromBackend Backend{..} =
          ({{#apis}}{{#operations}}{{#operation}}coerce {{operationId}}{{#hasMore}} :<|>
           {{/hasMore}}{{/operation}}{{/operations}}{{#hasMore}} :<|>
           {{/hasMore}}{{/apis}})

-- | Run the {{title}} server at the provided host and port.
run :: MonadIO m => ServerConfig -> Backend (ExceptT ServantErr IO) -> m ()
run ServerConfig{..} backend = liftIO $ Warp.runSettings warpSettings (app backend)
  where warpSettings = Warp.defaultSettings
                     & Warp.setPort configPort
                     & Warp.setHost (fromString configHost)

{{/apiInfo}}
